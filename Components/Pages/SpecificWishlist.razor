@page "/Wishlists/{id:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Wishlist.Data
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@attribute [Authorize]

<PageTitle>Wishlist Details</PageTitle>

<div class="d-flex justify-content-between align-items-center">
    <h1>@_wishlist?.Title</h1>
    <button @onclick="ShowCreateWishModal" class="btn btn-success">Create Wish</button>
    <button @onclick="ShowShareWishlistModal" class="btn btn-info ms-2">Share Wishlist</button>
</div>

@if (!_isDataLoaded)
{
    <p>Loading...</p>
}
else
{
    <div class="row">
        @foreach (var wish in _wishlist?.Wishes ?? new List<Wish>())
        {
            <div class="col-md-4 mb-4">
                <div class="card h-100">
                    @if (!string.IsNullOrWhiteSpace(wish.ImageUrl))
                    {
                        <img src="@wish.ImageUrl" class="card-img-top" alt="@wish.Title image"
                             style="height: 300px; width: 100%; object-fit: cover;">
                    }
                    else
                    {
                        <div class="card-img-top d-flex align-items-center justify-content-center"
                             style="height: 200px; background-color: #f8f9fa;">
                            <span>No Image</span>
                        </div>
                    }
                    <div class="card-body">
                        <h5 class="card-title">@wish.Title</h5>
                        <p class="card-text">@wish.Description</p>
                        <p class="card-text"><strong>@FormatPrice(wish.Price, wish.Currency)</strong></p>
                        <p class="card-text">Amount: @wish.Amount</p>
                    </div>
                    <div class="card-footer bg-transparent d-flex justify-content-between">
                        @if (!string.IsNullOrEmpty(wish.LinkUrl))
                        {
                            <a href="@wish.LinkUrl" target="_blank" class="btn btn-sm btn-info">Visit</a>
                        }
                        <button @onclick="() => BeginEditWish(wish)" class="btn btn-sm btn-primary">Edit</button>
                        <button @onclick="() => ConfirmRemoveWish(wish)" class="btn btn-sm btn-danger">Remove</button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (_isCreateWishModalVisible)
{
    <!-- Modal for Create Wish -->
    <div class="modal fade show" style="display: block;" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create Wish</h5>
                    <button type="button" class="btn-close" @onclick="CancelCreateWish"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-2">
                        <label for="newWishTitle">Wish Title</label>
                        <input id="newWishTitle" @bind="_newWishTitle" placeholder="Wish Title" class="form-control" />
                    </div>

                    <div class="mb-2">
                        <label for="newWishAmount">Amount</label>
                        <input id="newWishAmount" @bind="_newWishAmount" type="number" min="1" class="form-control" />
                    </div>

                    <div class="mb-2">
                        <label for="newWishDescription">Description</label>
                        <textarea id="newWishDescription" @bind="_newWishDescription" placeholder="Description" class="form-control"></textarea>
                    </div>

                    <div class="mb-2">
                        <label for="newWishLinkUrl">Link URL</label>
                        <input id="newWishLinkUrl" @bind="_newWishLinkUrl" placeholder="Link URL" class="form-control" />
                    </div>

                    <div class="mb-2">
                        <label for="newWishImageUrl">Image URL</label>
                        <input id="newWishImageUrl" @bind="_newWishImageUrl" placeholder="Image URL" class="form-control" />
                    </div>

                    <div class="row">
                        <div class="col-md-8 mb-2">
                            <label for="newWishPrice">Price</label>
                            <input id="newWishPrice" @bind="_newWishPriceString" placeholder="Price" class="form-control" type="text" />
                        </div>
                        <div class="col-md-4 mb-2">
                            <label for="newWishCurrency">Currency</label>
                            <div class="input-group">
                                <select id="newWishCurrency" @bind="_newWishCurrency" class="form-select">
                                    <option value="DKK">DKK</option>
                                    <option value="EUR">EUR</option>
                                    <option value="USD">USD</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelCreateWish">Close</button>
                    <button type="button" class="btn btn-success" @onclick="CreateWish">Create Wish</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal-backdrop fade show"></div>
}

@if (_isEditWishModalVisible)
{
    <!-- Modal for Edit Wish -->
    <div class="modal fade show" style="display: block;" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Wish</h5>
                    <button type="button" class="btn-close" @onclick="CancelEditWish"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-2">
                        <label for="editWishTitle">Wish Title</label>
                        <input id="editWishTitle" @bind="_editWishTitle" placeholder="Wish Title" class="form-control" />
                    </div>

                    <div class="mb-2">
                        <label for="editWishAmount">Amount</label>
                        <input id="editWishAmount" @bind="_editWishAmount" type="number" min="1" class="form-control" />
                    </div>

                    <div class="mb-2">
                        <label for="editWishDescription">Description</label>
                        <textarea id="editWishDescription" @bind="_editWishDescription" placeholder="Description" class="form-control"></textarea>
                    </div>

                    <div class="mb-2">
                        <label for="editWishLinkUrl">Link URL</label>
                        <input id="editWishLinkUrl" @bind="_editWishLinkUrl" placeholder="Link URL" class="form-control" />
                    </div>

                    <div class="mb-2">
                        <label for="editWishImageUrl">Image URL</label>
                        <input id="editWishImageUrl" @bind="_editWishImageUrl" placeholder="Image URL" class="form-control" />
                    </div>

                    <div class="row">
                        <div class="col-md-8 mb-2">
                            <label for="editWishPrice">Price</label>
                            <input id="editWishPrice" @bind="_editWishPriceString" placeholder="Price" class="form-control" type="text" />
                        </div>
                        <div class="col-md-4 mb-2">
                            <label for="editWishCurrency">Currency</label>
                            <div class="input-group">
                                <select id="editWishCurrency" @bind="_editWishCurrency" class="form-select">
                                    <option value="DKK">DKK</option>
                                    <option value="EUR">EUR</option>
                                    <option value="USD">USD</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelEditWish">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveWishEdit">Save</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal-backdrop fade show"></div>
}

@if (_isDeleteWishModalVisible)
{
    <!-- Modal for Delete Wish Confirmation -->
    <div class="modal fade show" style="display: block;" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Delete Wish</h5>
                    <button type="button" class="btn-close" @onclick="CancelDeleteWish"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this wish?</p>
                    <p><strong>@_wishToDelete?.Title</strong></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDeleteWish">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteWish">Delete</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal-backdrop fade show"></div>
}

@if (_isShareModalVisible)
{
    <div class="modal fade show" tabindex="-1" style="display: block;" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Share Wishlist</h5>
                    <button type="button" class="btn-close" @onclick="CancelShareWishlist"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-2">
                        <label for="shareLinkName">Name</label>
                        <input id="shareLinkName" @bind="_shareLinkName" placeholder="Link Name" class="form-control" />
                    </div>
                    <div class="mb-2">
                        <label for="shareLinkExpiryDate">Expiry Date</label>
                        <input id="shareLinkExpiryDate" type="date" @bind="_shareLinkExpiryDate" class="form-control" />
                    </div>
                    <button class="btn btn-primary" @onclick="GenerateShareLink">Generate Share Link</button>

                    <!-- Display Existing Share Links -->
                    <h3>Existing Share Links</h3>
                    <ul class="list-group mt-3">
                        @foreach (var link in _shareLinks)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <div>
                                    <strong>@link.Name:</strong>
                                    <a href="@(_baseUri + $"/SpecificSharedWishlist/{link.Token}")">@(_baseUri + $"/SpecificSharedWishlist/{link.Token}")</a>
                                    <br />
                                    @if (link.ExpiryDate < DateTime.UtcNow)
                                    {
                                        <span>Expired on: @link.ExpiryDate.ToString("yyyy-MM-dd")</span>
                                    }
                                    else
                                    {
                                        <span>Expires on: @link.ExpiryDate.ToString("yyyy-MM-dd")</span>
                                    }
                                </div>
                                <button @onclick="() => ConfirmDeleteShareLink(link.Id)" class="btn btn-sm btn-danger">Delete</button>
                            </li>
                        }
                    </ul>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelShareWishlist">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (_isDeleteShareLinkModalVisible)
{
    <!-- Modal for Delete Share Link Confirmation -->
    <div class="modal fade show" style="display: block;" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Delete Share Link</h5>
                    <button type="button" class="btn-close" @onclick="CancelDeleteShareLink"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this share link?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDeleteShareLink">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteShareLinkConfirmed">Delete</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public int Id { get; set; }
    private Wishlist? _wishlist = null;
    private bool _isDataLoaded = false;
    private bool _isCreateWishModalVisible = false;
    private bool _isEditWishModalVisible = false;
    private bool _isDeleteWishModalVisible = false;
    private bool _isShareModalVisible = false;
    private string _shareLink = string.Empty;
    private string _baseUri = string.Empty;
    private string _shareLinkName = string.Empty;
    private List<ShareLink> _shareLinks = new();
    private bool _isDeleteShareLinkModalVisible = false;
    private int _shareLinkToDeleteId;
    private DateTime? _shareLinkExpiryDate = DateTime.UtcNow.AddDays(30);

    private string _newWishTitle = string.Empty;
    private string _newWishPriceString = "0"; 
    private decimal _newWishPrice = 0; 
    private string _newWishCurrency = "DKK";
    private string _newWishImageUrl = string.Empty;
    private int _newWishAmount = 1;
    private string _newWishDescription = string.Empty;
    private string _newWishLinkUrl = string.Empty;

    private Wish? _wishToEdit = null;
    private string _editWishTitle = string.Empty;
    private string _editWishPriceString = "0"; 
    private decimal _editWishPrice = 0; 
    private string _editWishCurrency = "DKK";
    private string _editWishImageUrl = string.Empty;
    private int _editWishAmount = 1;
    private string _editWishDescription = string.Empty;
    private string _editWishLinkUrl = string.Empty;
    
    private Wish? _wishToDelete = null;

    protected override async Task OnInitializedAsync()
    {
        _baseUri = NavigationManager.BaseUri.TrimEnd('/');
        await LoadWishlist();
        await LoadShareLinks();
    }

    private async Task LoadShareLinks()
    {
        if (_wishlist != null)
        {
            _shareLinks = await DbContext.ShareLinks.Where(sl => sl.WishlistId == _wishlist.Id).ToListAsync();
        }
    }

    private async Task LoadWishlist()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);
        if (user != null)
        {
            _wishlist = await DbContext.Wishlists.Include(wl => wl.Wishes).FirstOrDefaultAsync(wl => wl.Id == Id && wl.UserId == user.Id);
            _isDataLoaded = true;
            StateHasChanged();
        }
    }
    
    private void CancelDeleteWish()
    {
        _wishToDelete = null;
        _isDeleteWishModalVisible = false;
    }
    
    private void ConfirmDeleteShareLink(int linkId)
    {
        _isShareModalVisible = false;
        _shareLinkToDeleteId = linkId;
        _isDeleteShareLinkModalVisible = true;
    }

    private void CancelDeleteShareLink()
    {
        _shareLinkToDeleteId = 0;
        _isDeleteShareLinkModalVisible = false;
        _isShareModalVisible = true;
    }

    private async Task DeleteShareLinkConfirmed()
    {
        await DeleteShareLink(_shareLinkToDeleteId);
        _isDeleteShareLinkModalVisible = false;
        _isShareModalVisible = true;
    }

    private async Task DeleteWish()
    {
        if (_wishlist != null && _wishToDelete != null)
        {
            DbContext.Wishes.Remove(_wishToDelete);
            await DbContext.SaveChangesAsync();

            _wishToDelete = null;
            _isDeleteWishModalVisible = false;

            await LoadWishlist();
        }
    }

    private void ShowCreateWishModal()
    {
        _isCreateWishModalVisible = true;
    }

    private void CancelCreateWish()
    {
        _newWishTitle = string.Empty;
        _newWishPriceString = "0"; 
        _newWishImageUrl = string.Empty;
        _isCreateWishModalVisible = false;
    }

    private async Task CreateWish()
    {
        _newWishTitle = _newWishTitle.Trim();
        _newWishDescription = _newWishDescription.Trim();  // Trim the description

        if (_wishlist != null && !string.IsNullOrWhiteSpace(_newWishTitle) && TryParsePrice(_newWishPriceString, out _newWishPrice))
        {
            var newWish = new Wish
            {
                Title = _newWishTitle,
                Price = _newWishPrice,
                Currency = _newWishCurrency,
                ImageUrl = _newWishImageUrl,
                UserId = _wishlist.UserId,
                Wishlists = new List<Wishlist> { _wishlist },
                Amount = _newWishAmount,
                Description = _newWishDescription,
                LinkUrl = _newWishLinkUrl  // New field
            };

            DbContext.Wishes.Add(newWish);
            await DbContext.SaveChangesAsync();

            _newWishTitle = string.Empty;
            _newWishPriceString = "0";
            _newWishImageUrl = string.Empty;
            _newWishCurrency = "DKK";
            _newWishAmount = 1;
            _newWishDescription = string.Empty;
            _newWishLinkUrl = string.Empty;
            _isCreateWishModalVisible = false;

            await LoadWishlist();
        }
    }

    private void BeginEditWish(Wish wish)
    {
        _wishToEdit = wish;
        _editWishTitle = wish.Title;
        _editWishPriceString = wish.Price.ToString("0.##");
        _editWishCurrency = wish.Currency;
        _editWishImageUrl = wish.ImageUrl;
        _editWishAmount = wish.Amount;
        _editWishDescription = wish.Description;
        _editWishLinkUrl = wish.LinkUrl; // New field
        _isEditWishModalVisible = true;
    }

    private void CancelEditWish()
    {
        _wishToEdit = null;
        _editWishTitle = string.Empty;
        _editWishPriceString = "0";
        _editWishCurrency = "DKK";
        _editWishImageUrl = string.Empty;
        _isEditWishModalVisible = false;
    }

    private async Task SaveWishEdit()
    {
        if (_wishToEdit != null)
        {
            _editWishTitle = _editWishTitle.Trim();
            _editWishDescription = _editWishDescription.Trim();

            if (!string.IsNullOrWhiteSpace(_editWishTitle) && TryParsePrice(_editWishPriceString, out _editWishPrice))
            {
                var existingWish = await DbContext.Wishes.FirstOrDefaultAsync(w => w.Id == _wishToEdit.Id);

                if (existingWish != null)
                {
                    existingWish.Title = _editWishTitle;
                    existingWish.Price = _editWishPrice;
                    existingWish.Currency = _editWishCurrency;
                    existingWish.ImageUrl = _editWishImageUrl;
                    existingWish.Amount = _editWishAmount;
                    existingWish.Description = _editWishDescription;
                    existingWish.LinkUrl = _editWishLinkUrl;  // New field
                    await DbContext.SaveChangesAsync();

                    _wishToEdit = null;
                    _editWishTitle = string.Empty;
                    _editWishPriceString = "0";
                    _editWishCurrency = "DKK";
                    _editWishImageUrl = string.Empty;
                    _editWishAmount = 1;
                    _editWishDescription = string.Empty;
                    _editWishLinkUrl = string.Empty; // Reset field
                    _isEditWishModalVisible = false;

                    StateHasChanged();
                }
            }
        }
    }

    private void ConfirmRemoveWish(Wish wish)
    {
        _wishToDelete = wish;
        _isDeleteWishModalVisible = true;
    }

    private string FormatPrice(decimal price, string currencyCode)
    {
        var culture = currencyCode switch
        {
            "DKK" => new System.Globalization.CultureInfo("da-DK"),
            "EUR" => new System.Globalization.CultureInfo("fr-FR"),
            "USD" => new System.Globalization.CultureInfo("en-US"),
            _ => System.Globalization.CultureInfo.CurrentCulture,
        };

        return price.ToString("C2", culture);
    }

    private bool TryParsePrice(string value, out decimal result)
    {
        var modifiedValue = value.Replace(',', '.');
        var isValid = decimal.TryParse(modifiedValue, System.Globalization.NumberStyles.AllowDecimalPoint, System.Globalization.CultureInfo.InvariantCulture, out result);
        
        // Ensure no more than two decimal places
        result = decimal.Round(result, 2);
        
        return isValid;
    }
    
    private void ShowShareWishlistModal()
    {
        _isShareModalVisible = true;
    }

    private void CancelShareWishlist()
    {
        _isShareModalVisible = false;
        _shareLinkName = string.Empty;
        _shareLink = string.Empty;
        _shareLinkExpiryDate = DateTime.UtcNow.AddDays(30); // Reset expiry date to 30 days from now
    }

    private async Task GenerateShareLink()
    {
        if (_wishlist != null && !string.IsNullOrEmpty(_shareLinkName) && _shareLinkExpiryDate.HasValue)
        {
            var token = Guid.NewGuid().ToString();
            var shareLink = new ShareLink
            {
                Token = token,
                WishlistId = _wishlist.Id,
                ExpiryDate = DateTime.SpecifyKind(_shareLinkExpiryDate.Value, DateTimeKind.Utc), // Ensure DateTime is in UTC
                Name = _shareLinkName
            };

            DbContext.ShareLinks.Add(shareLink);
            await DbContext.SaveChangesAsync();

            _shareLink = _baseUri + $"/SpecificSharedWishlist/{shareLink.Token}";
            _shareLinkName = string.Empty;

            await LoadShareLinks();
        }
    }

    private async Task DeleteShareLink(int linkId)
    {
        var link = await DbContext.ShareLinks.FindAsync(linkId);
        if (link != null)
        {
            DbContext.ShareLinks.Remove(link);
            await DbContext.SaveChangesAsync();

            await LoadShareLinks(); // Reload the share links list
        }
    }
}