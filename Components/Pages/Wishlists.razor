@page "/wishlists"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Wishlist.Data
@rendermode InteractiveServer

@attribute [Authorize]

<PageTitle>Wishlists</PageTitle>

<div class="d-flex justify-content-between align-items-center">
    <h1>My wishlists</h1>
    <button @onclick="() => ShowCreateWishlistModal()" class="btn btn-success">
        <i class="fas fa-plus me-1"></i> New wishlist
    </button>
</div>

<AuthorizeView>
    <Authorized>
        @if (!_isDataLoaded)
        {
            <p>Loading...</p>
        }
        else
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Created on</th>    
                        <th>Last updated</th>
                        <th>Items</th>
                        <th class="text-end">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var wishlist in _wishlists)
                    {
                        <tr>
                            <td class="align-middle">@wishlist.Title</td>
                            <td class="align-middle">@wishlist.CreationDate.ToString("yyyy-MM-dd")</td>
                            <td class="align-middle">@wishlist.LastUpdated.ToString("yyyy-MM-dd")</td>
                            <td class="align-middle">@wishlist.ItemsCount</td>
                            <td class="align-middle text-end">
                                <button @onclick="() => BeginEditWishlist(wishlist)" class="btn btn-sm btn-primary">
                                    <i class="fas fa-edit me-1"></i> Edit
                                </button>
                                <button @onclick="() => ConfirmRemoveWishlist(wishlist)" class="btn btn-sm btn-danger">
                                    <i class="fas fa-trash-alt me-1"></i> Remove
                                </button>
                                <button @onclick="() => ShowWishlist(wishlist.Id)" class="btn btn-sm btn-info">
                                    <i class="fas fa-eye me-1"></i> Show
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized to view this page.</p>
    </NotAuthorized>
</AuthorizeView>

@if (_isDeleteModalVisible)
{
    <!-- Bootstrap Modal for Delete Confirmation -->
    <div class="modal fade show" id="staticBackdrop" style="display: block;" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel">Confirm the deletion</h5>
                    <button type="button" class="btn-close" @onclick="CancelRemoveWishlist"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete the wishlist <em><strong>@(_wishlistToDelete?.Title)</strong></em>?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelRemoveWishlist">
                        <i class="fas fa-times me-1"></i> Close
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="RemoveWishlistConfirmed">
                        <i class="fas fa-trash-alt me-1"></i> Delete
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal-backdrop fade show"></div>
}

@if (_isEditModalVisible)
{
    <!-- Bootstrap Modal for Edit Wishlist -->
    <div class="modal fade show" id="editWishlistModal" style="display: block;" tabindex="-1" aria-labelledby="editWishlistLabel" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editWishlistLabel">Edit wishlist</h5>
                    <button type="button" class="btn-close" @onclick="CancelEditWishlist"></button>
                </div>
                <div class="modal-body">
                    <div class="d-flex flex-column gap-2">
                        <label for="editWishlistTitle">Title</label>
                        <input id="editWishlistTitle" @bind="_wishlistEditTitle" placeholder="My birthday" class="form-control" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelEditWishlist">
                        <i class="fas fa-times me-1"></i> Close
                    </button>
                    <button type="button" class="btn btn-primary" @onclick="SaveWishlistEdit">
                        <i class="fas fa-check me-1"></i> Save
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal-backdrop fade show"></div>
}

@if (_isCreateModalVisible)
{
    <!-- Bootstrap Modal for Create Wishlist -->
    <div class="modal fade show" id="createWishlistModal" style="display: block;" tabindex="-1" aria-labelledby="createWishlistLabel" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="createWishlistLabel">New wishlist</h5>
                    <button type="button" class="btn-close" @onclick="CancelCreateWishlist"></button>
                </div>
                <div class="modal-body">
                    <div class="d-flex flex-column gap-2">
                        <label for="newWishlistTitle">Title</label>
                        <input id="newWishlistTitle" @bind="_newWishlistTitle" placeholder="My birthday" class="form-control" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelCreateWishlist">
                        <i class="fas fa-times me-1"></i> Close
                    </button>
                    <button type="button" class="btn btn-success" @onclick="CreateWishlist">
                        <i class="fas fa-check me-1"></i> Create
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal-backdrop fade show"></div>
}

@code {
    private bool _isDataLoaded = false;
    private List<Wishlist> _wishlists = new();
    private string _newWishlistTitle = string.Empty;
    private Wishlist? _wishlistToDelete = null;
    private bool _isDeleteModalVisible = false;
    private bool _isEditModalVisible = false;
    private bool _isCreateModalVisible = false;

    private Wishlist? _wishlistToEdit = null;
    private string _wishlistEditTitle = string.Empty;

    [Inject] private UserManager<ApplicationUser> UserManager { get; set; } = null!;
    [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;
    [Inject] private ApplicationDbContext DbContext { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await LoadWishlistsAsync();
        _isDataLoaded = true;
    }

    private async Task LoadWishlistsAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);
        if (user != null)
        {
            _wishlists = await DbContext.Wishlists
                .Include(wl => wl.Wishes)
                .Where(wl => wl.UserId == user.Id)
                .ToListAsync();
        }
    }

    private async Task CreateWishlist()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);
        _newWishlistTitle = _newWishlistTitle.Trim();
        if (!string.IsNullOrEmpty(_newWishlistTitle) && user != null)
        {
            var wishlist = new Wishlist
            {
                Title = _newWishlistTitle,
                UserId = user.Id,
                CreationDate = DateTime.UtcNow,
                LastUpdated = DateTime.UtcNow
            };
            DbContext.Wishlists.Add(wishlist);
            await DbContext.SaveChangesAsync();
            _wishlists.Add(wishlist);
            _newWishlistTitle = string.Empty;
            _isCreateModalVisible = false; // Hide the modal once created
            StateHasChanged();
        }
    }

    private void ConfirmRemoveWishlist(Wishlist wishlist)
    {
        _wishlistToDelete = wishlist;
        _isDeleteModalVisible = true;
    }

    private async Task RemoveWishlistConfirmed()
    {
        if (_wishlistToDelete != null)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authState.User);
            if (user != null && _wishlistToDelete.UserId == user.Id)
            {
                var wishes = _wishlistToDelete.Wishes.ToList();
                foreach (var wish in wishes)
                {
                    wish.Wishlists.Remove(_wishlistToDelete);
                }

                DbContext.Wishlists.Remove(_wishlistToDelete);
                await DbContext.SaveChangesAsync();
                _wishlists.Remove(_wishlistToDelete);
                _wishlistToDelete = null;
                _isDeleteModalVisible = false;
                StateHasChanged();
            }
        }
    }

    private void CancelRemoveWishlist()
    {
        _wishlistToDelete = null;
        _isDeleteModalVisible = false;
    }

    private void BeginEditWishlist(Wishlist wishlist)
    {
        _wishlistToEdit = wishlist;
        _wishlistEditTitle = wishlist.Title;
        _isEditModalVisible = true;
    }

    private void CancelEditWishlist()
    {
        _wishlistToEdit = null;
        _wishlistEditTitle = string.Empty;
        _isEditModalVisible = false;
    }

    private async Task SaveWishlistEdit()
    {
        if (_wishlistToEdit != null)
        {
            _wishlistEditTitle = _wishlistEditTitle.Trim();
            if (!string.IsNullOrWhiteSpace(_wishlistEditTitle))
            {
                var existingWishlist = await DbContext.Wishlists
                    .FirstOrDefaultAsync(wl => wl.Id == _wishlistToEdit.Id);

                if (existingWishlist != null)
                {
                    existingWishlist.Title = _wishlistEditTitle;
                    existingWishlist.LastUpdated = DateTime.UtcNow;
                    await DbContext.SaveChangesAsync();
                    StateHasChanged();
                }

                _wishlistToEdit = null;
                _wishlistEditTitle = string.Empty;
                _isEditModalVisible = false;
            }
        }
    }

    private void ShowCreateWishlistModal()
    {
        _isCreateModalVisible = true;
    }

    private void CancelCreateWishlist()
    {
        _newWishlistTitle = string.Empty;
        _isCreateModalVisible = false;
    }

    private void ShowWishlist(Guid wishlistId)
    {
        NavigationManager.NavigateTo($"/wishlists/{wishlistId}");
    }
}