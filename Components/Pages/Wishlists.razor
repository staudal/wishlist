@page "/wishlists"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Wishlist.Data
@rendermode InteractiveServer

@attribute [Authorize]

<PageTitle>Wishlists</PageTitle>

<div class="d-flex justify-content-between align-items-center">
    <h1>My wishlists</h1>
    <Button Color="ButtonColor.Success" @onclick="ShowCreateWishlistModal">
        New wishlist
    </Button>
</div>

<AuthorizeView>
    <Authorized>
        @if (!_isDataLoaded)
        {
            <p>Loading...</p>
        }
        else
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Created on</th>    
                        <th>Last updated</th>
                        <th>Items</th>
                        <th class="text-end">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var wishlist in _wishlists)
                    {
                        <tr>
                            <td class="align-middle">@wishlist.Title</td>
                            <td class="align-middle">@wishlist.CreationDate.ToString("yyyy-MM-dd")</td>
                            <td class="align-middle">@wishlist.LastUpdated.ToString("yyyy-MM-dd")</td>
                            <td class="align-middle">@wishlist.ItemsCount</td>
                            <td class="align-middle text-end">
                                <Button Color="ButtonColor.Secondary" Size="ButtonSize.Small" @onclick="() => ShowEditWishlistModal(wishlist)">Edit</Button>
                                <Button Color="ButtonColor.Danger" Size="ButtonSize.Small" @onclick="() => ShowDeleteConfirmationAsync(wishlist)">Remove</Button>
                                <Button Color="ButtonColor.Primary" Size="ButtonSize.Small" @onclick="() => ShowWishlist(wishlist.Id)">Show</Button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized to view this page.</p>
    </NotAuthorized>
</AuthorizeView>

<Modal @ref="_editWishlistModal" title="Edit Wishlist" UseStaticBackdrop="true" CloseOnEscape="false">
    <BodyTemplate>
        <div class="d-flex flex-column gap-2">
            <label for="editWishlistTitle">Title</label>
            <input id="editWishlistTitle" @bind="_wishlistEditTitle" placeholder="My birthday" class="form-control" />
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="CancelEditWishlist">Close</Button>
        <Button Color="ButtonColor.Primary" @onclick="SaveWishlistEdit">Save</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="_createWishlistModal" title="New Wishlist" UseStaticBackdrop="true" CloseOnEscape="false">
    <BodyTemplate>
        <div class="d-flex flex-column gap-2">
            <label for="newWishlistTitle">Title</label>
            <input id="newWishlistTitle" @bind="_newWishlistTitle" placeholder="My birthday" class="form-control" />
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="CancelCreateWishlist">Close</Button>
        <Button Color="ButtonColor.Success" @onclick="CreateWishlist">Create</Button>
    </FooterTemplate>
</Modal>

<ConfirmDialog @ref="_deleteConfirmDialog" />

@code {
    private Modal _createWishlistModal = default!;
    private Modal _editWishlistModal = default!;
    private ConfirmDialog _deleteConfirmDialog = default!;
    
    private bool _isDataLoaded = false;
    private List<Wishlist> _wishlists = [];
    private string _newWishlistTitle = string.Empty;
    private Wishlist? _wishlistToDelete = null;
    
    private Wishlist? _wishlistToEdit = null;
    private string _wishlistEditTitle = string.Empty;

    [Inject] private UserManager<ApplicationUser> UserManager { get; set; } = null!;
    [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;
    [Inject] private ApplicationDbContext DbContext { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await LoadWishlistsAsync();
        _isDataLoaded = true;
    }

    private async Task LoadWishlistsAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);
        if (user != null)
        {
            _wishlists = await DbContext.Wishlists
                .Include(wl => wl.Wishes)
                .Where(wl => wl.UserId == user.Id)
                .ToListAsync();
        }
    }

    private async Task CreateWishlist()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);
        _newWishlistTitle = _newWishlistTitle.Trim();
        if (!string.IsNullOrEmpty(_newWishlistTitle) && user != null)
        {
            var wishlist = new Wishlist
            {
                Title = _newWishlistTitle,
                UserId = user.Id,
                CreationDate = DateTime.UtcNow,
                LastUpdated = DateTime.UtcNow
            };
            DbContext.Wishlists.Add(wishlist);
            await DbContext.SaveChangesAsync();
            _wishlists.Add(wishlist);
            _newWishlistTitle = string.Empty;
            await _createWishlistModal.HideAsync();
            StateHasChanged();
        }
    }

    private async Task SaveWishlistEdit()
    {
        if (_wishlistToEdit != null)
        {
            _wishlistEditTitle = _wishlistEditTitle.Trim();
            if (!string.IsNullOrWhiteSpace(_wishlistEditTitle))
            {
                var existingWishlist = await DbContext.Wishlists
                    .FirstOrDefaultAsync(wl => wl.Id == _wishlistToEdit.Id);

                if (existingWishlist != null)
                {
                    existingWishlist.Title = _wishlistEditTitle;
                    existingWishlist.LastUpdated = DateTime.UtcNow;
                    await DbContext.SaveChangesAsync();
                    StateHasChanged();
                }

                _wishlistToEdit = null;
                _wishlistEditTitle = string.Empty;
                await _editWishlistModal.HideAsync();
            }
        }
    }
    
    private async Task ShowDeleteConfirmationAsync(Wishlist wishlist)
    {
        _wishlistToDelete = wishlist;

        var confirmation = await _deleteConfirmDialog.ShowAsync(
            title: "Are you sure you want to delete this?",
            message1: $"This will delete the wishlist {wishlist.Title}. Once deleted, it cannot be undone.",
            message2: "Do you want to proceed?"
        );

        if (confirmation)
        {
            await RemoveWishlistConfirmedAsync();
        }
        else
        {
            _wishlistToDelete = null;
        }
    }
    
    private async Task RemoveWishlistConfirmedAsync()
    {
        if (_wishlistToDelete != null)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authState.User);

            if (user != null && _wishlistToDelete.UserId == user.Id)
            {
                var wishes = _wishlistToDelete.Wishes.ToList();
                foreach (var wish in wishes)
                {
                    wish.Wishlists.Remove(_wishlistToDelete);
                }

                DbContext.Wishlists.Remove(_wishlistToDelete);
                await DbContext.SaveChangesAsync();
                _wishlists.Remove(_wishlistToDelete);
                _wishlistToDelete = null;
                StateHasChanged();
            }
        }
    }

    private async Task ShowCreateWishlistModal()
    {
        await _createWishlistModal.ShowAsync();
    }

    private async Task ShowEditWishlistModal(Wishlist wishlist)
    {
        _wishlistToEdit = wishlist;
        _wishlistEditTitle = wishlist.Title;
        await _editWishlistModal.ShowAsync();
    }

    private async Task CancelCreateWishlist()
    {
        _newWishlistTitle = string.Empty;
        await _createWishlistModal.HideAsync();
    }
    
    private void CancelEditWishlist()
    {
        _wishlistToEdit = null;
        _wishlistEditTitle = string.Empty;
        _editWishlistModal.HideAsync();
    }

    private void ShowWishlist(Guid wishlistId)
    {
        NavigationManager.NavigateTo($"/wishlists/{wishlistId}");
    }
}